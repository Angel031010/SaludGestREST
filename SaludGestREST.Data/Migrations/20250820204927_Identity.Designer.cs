// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaludGestREST.Data;

#nullable disable

namespace SaludGestREST.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250820204927_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "356a4c35-f2b5-448a-aa6a-c33b4f1a00b5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "75d60431-14e6-4d36-b24c-8d5c91652d08",
                            Name = "Medico",
                            NormalizedName = "Medico"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6196403b-dd03-4f13-aa06-e1038cff89f5",
                            RoleId = "356a4c35-f2b5-448a-aa6a-c33b4f1a00b5"
                        },
                        new
                        {
                            UserId = "3b13e67a-5705-4625-9837-349b883ac758",
                            RoleId = "75d60431-14e6-4d36-b24c-8d5c91652d08"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SaludGestREST.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6196403b-dd03-4f13-aa06-e1038cff89f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3174e91-a976-47a4-917b-8a7abf5b9b1d",
                            Email = "admin@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJT4X8TedUeNq2a8gcEhsceBDxH9pSyMkBcO3ljTctWUM+xjdxk5E5lJEKJOGyCz8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e45ae143-f4cb-44af-a225-6e2963c7b450",
                            TwoFactorEnabled = false,
                            UserName = "admin@test.com"
                        },
                        new
                        {
                            Id = "3b13e67a-5705-4625-9837-349b883ac758",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0773fa89-7b0a-46c5-9c5f-c70ff8ed4707",
                            Email = "medico@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEDICO@TEST.COM",
                            NormalizedUserName = "MEDICO@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDq+nsm9xsFl1hPg7+xqxEXfdkJOHdojAIk/7GtzDIfvurPuZjwAewxx0BzfSMe5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac14fe5b-c3fd-4dd2-ae41-846ce3165aba",
                            TwoFactorEnabled = false,
                            UserName = "medico@test.com"
                        });
                });

            modelBuilder.Entity("SaludGestREST.Data.Models.CentroMedico", b =>
                {
                    b.Property<int>("CentroMedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CentroMedicoId"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HighSystem")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CentroMedicoId");

                    b.ToTable("CentrosMedicos");

                    b.HasData(
                        new
                        {
                            CentroMedicoId = 1,
                            Codigo = "CMP001",
                            Direccion = "Av. Reforma 123, Puebla, PUE",
                            Email = "contacto@cmpuebla.com",
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8047),
                            ImagenUrl = "/Uploads/centroMedico.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Nombre = "Centro Médico Puebla",
                            Telefono = "222-123-4567"
                        },
                        new
                        {
                            CentroMedicoId = 2,
                            Codigo = "CM002",
                            Direccion = "Calle Juárez 456, CDMX",
                            Email = "info@clinicametropolitana.com",
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8050),
                            ImagenUrl = "/Uploads/hospitalAngelopolitano.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Nombre = "Clínica Metropolitana",
                            Telefono = "55-9876-5432"
                        },
                        new
                        {
                            CentroMedicoId = 3,
                            Codigo = "HV003",
                            Direccion = "Av. Universidad 789, Guadalajara, JAL",
                            Email = "hospital@delvalle.com",
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8052),
                            ImagenUrl = "/Uploads/Valle.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Nombre = "Hospital del Valle",
                            Telefono = "33-4567-8910"
                        });
                });

            modelBuilder.Entity("SaludGestREST.Data.Models.Especialidad", b =>
                {
                    b.Property<int>("IdEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspecialidad"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HighSystem")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEspecialidad");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("SaludGestREST.Data.Models.InventarioMedicamento", b =>
                {
                    b.Property<int>("InventarioMedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventarioMedId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CentroId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HighSystem")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.Property<int>("Minimo")
                        .HasColumnType("int");

                    b.HasKey("InventarioMedId");

                    b.HasIndex("CentroId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("InventarioMedico");

                    b.HasData(
                        new
                        {
                            InventarioMedId = 1,
                            Cantidad = 10,
                            CentroId = 1,
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8349),
                            IsActive = true,
                            IsDeleted = false,
                            MedicamentoId = 1,
                            Minimo = 5
                        },
                        new
                        {
                            InventarioMedId = 2,
                            Cantidad = 10,
                            CentroId = 2,
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8350),
                            IsActive = true,
                            IsDeleted = false,
                            MedicamentoId = 2,
                            Minimo = 5
                        });
                });

            modelBuilder.Entity("SaludGestREST.Data.Models.Medicamento", b =>
                {
                    b.Property<int>("MedicamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicamentoId"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HighSystem")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sustancia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicamentoId");

                    b.ToTable("Medicamentos");

                    b.HasData(
                        new
                        {
                            MedicamentoId = 1,
                            Codigo = "234r324",
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8263),
                            IsActive = true,
                            IsDeleted = false,
                            Lote = "1234457",
                            Nombre = "Rosel",
                            Sustancia = "Paracetamol"
                        },
                        new
                        {
                            MedicamentoId = 2,
                            Codigo = "23324",
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8267),
                            IsActive = true,
                            IsDeleted = false,
                            Lote = "12344",
                            Nombre = "Neomelubrina",
                            Sustancia = "Parace"
                        });
                });

            modelBuilder.Entity("SaludGestREST.Data.Models.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacienteId"));

                    b.Property<string>("ApMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HighSystem")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Telefono")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UrlFoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacienteId");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            PacienteId = 1,
                            ApMaterno = "Velasco",
                            ApPaterno = "Hernandez",
                            Email = "ejemplo@test.com",
                            FechaNacimiento = new DateTime(1989, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8305),
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8298),
                            IsActive = true,
                            IsDeleted = false,
                            Nombre = "Sergio",
                            Telefono = 557511785m,
                            UrlFoto = "/default.jpg"
                        },
                        new
                        {
                            PacienteId = 2,
                            ApMaterno = "Sanchez",
                            ApPaterno = "Ildefonso",
                            Email = "ejemplo@test.com",
                            FechaNacimiento = new DateTime(2003, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8314),
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8313),
                            IsActive = true,
                            IsDeleted = false,
                            Nombre = "Angel",
                            Telefono = 557486785m,
                            UrlFoto = "/default.jpg"
                        },
                        new
                        {
                            PacienteId = 3,
                            ApMaterno = "Castillo",
                            ApPaterno = "Sapiens",
                            Email = "ejemplo@test.com",
                            FechaNacimiento = new DateTime(2001, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8317),
                            HighSystem = new DateTime(2025, 8, 20, 14, 49, 26, 198, DateTimeKind.Local).AddTicks(8315),
                            IsActive = true,
                            IsDeleted = false,
                            Nombre = "Roberto",
                            Telefono = 5632111785m,
                            UrlFoto = "/default.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SaludGestREST.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SaludGestREST.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaludGestREST.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SaludGestREST.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaludGestREST.Data.Models.InventarioMedicamento", b =>
                {
                    b.HasOne("SaludGestREST.Data.Models.CentroMedico", "Centro")
                        .WithMany()
                        .HasForeignKey("CentroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaludGestREST.Data.Models.Medicamento", "Medicamento")
                        .WithMany()
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Centro");

                    b.Navigation("Medicamento");
                });
#pragma warning restore 612, 618
        }
    }
}
